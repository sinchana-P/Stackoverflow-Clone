{"ast":null,"code":"import * as api from '../api';\n// import { setCurrentUser } from './currentUser';\nimport { setCurrentUser } from './currentUser';\n\n//1. in Auth.jsx :                                                                           \n// dispatch(signup( { name, email, password }, navigate))                                   \n\n//2. in api/index.js :                                                                       \n// export const signUp = (authData) => API.post('/user/signup', authData)                  \n\n// 3.\n// export const signup = (authData, navigate) => async (dispatch) => {                        \n//     try{                                                                                    \n//         // { data }  : we are receiving response (result [new user/existing user] & token) from database, after sending authData to the database\n//         //       3.    &            1.         // 2. in   --> api/index.js          \n//         const { data } = await api.signUp(authData);   \n//         // authData  --->  is sent to backend, with post req --->    /user/signup                                          \n//         console.log(data); \n//         // action ---> { type: 'AUTH', data }\n//         dispatch({ type: 'AUTH', data });                                                                \n//         navigate('/');    // after login , to redirect directly to home page. We use navigate\n//     }catch(error){\n//         console.log(error);                                                                                                                                                                                                                                                 \n//     }\n// }\n\n// export const login = (authData, navigate) => async (dispatch) => {\n//     try{\n//         // { data }  : we are receiving response (result [new user/existing user] & token) from database, after sending authData to the database\n//         //       3.    &            1.             // 2. in   --> api/index.js\n//         const { data } = await api.logIn(authData)                                \n//         dispatch({ type: 'AUTH', data })                                        \n//         navigate('/')    // after login , to redirect directly to home page. We use navigate\n//     }catch(error){\n//         console.log(error)\n//     }\n// }\n\n// ðŸ‘‰ this file is imported in ---> Pages/Auth/Auth.jsx\n\n// open file :\n// Auth --> Auth.jsx\n\n// Redux thunk:\n// is used to do asynchronous action in Redux\n\nexport const signup = (authData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.signUp(authData);\n    console.log(data);\n    dispatch({\n      type: 'AUTH',\n      data\n    });\n    // dispatches only (once) when user logged in. It's gone after REFRESH.        \n    dispatch(setCurrentUser(JSON.parse(localStorage.getItem('Profile')))); // Navbar.jsx                                                       \n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const login = (authData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.logIn(authData);\n    dispatch({\n      type: 'AUTH',\n      data\n    });\n    dispatch(setCurrentUser(JSON.parse(localStorage.getItem('Profile')))); // Navbar.jsx                                                                                          \n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["api","setCurrentUser","signup","authData","navigate","dispatch","data","signUp","console","log","type","JSON","parse","localStorage","getItem","error","login","logIn"],"sources":["F:/NULLCLASS/Stack-overflow-clone/client/src/actions/auth.js"],"sourcesContent":["import * as api from '../api'                                                              \r\n// import { setCurrentUser } from './currentUser';\r\nimport { setCurrentUser } from './currentUser';\r\n\r\n//1. in Auth.jsx :                                                                           \r\n// dispatch(signup( { name, email, password }, navigate))                                   \r\n \r\n//2. in api/index.js :                                                                       \r\n// export const signUp = (authData) => API.post('/user/signup', authData)                  \r\n \r\n// 3.\r\n// export const signup = (authData, navigate) => async (dispatch) => {                        \r\n//     try{                                                                                    \r\n//         // { data }  : we are receiving response (result [new user/existing user] & token) from database, after sending authData to the database\r\n//         //       3.    &            1.         // 2. in   --> api/index.js          \r\n//         const { data } = await api.signUp(authData);   \r\n//         // authData  --->  is sent to backend, with post req --->    /user/signup                                          \r\n//         console.log(data); \r\n//         // action ---> { type: 'AUTH', data }\r\n//         dispatch({ type: 'AUTH', data });                                                                \r\n//         navigate('/');    // after login , to redirect directly to home page. We use navigate\r\n//     }catch(error){\r\n//         console.log(error);                                                                                                                                                                                                                                                 \r\n//     }\r\n// }\r\n\r\n// export const login = (authData, navigate) => async (dispatch) => {\r\n//     try{\r\n//         // { data }  : we are receiving response (result [new user/existing user] & token) from database, after sending authData to the database\r\n//         //       3.    &            1.             // 2. in   --> api/index.js\r\n//         const { data } = await api.logIn(authData)                                \r\n//         dispatch({ type: 'AUTH', data })                                        \r\n//         navigate('/')    // after login , to redirect directly to home page. We use navigate\r\n//     }catch(error){\r\n//         console.log(error)\r\n//     }\r\n// }\r\n\r\n// ðŸ‘‰ this file is imported in ---> Pages/Auth/Auth.jsx\r\n\r\n// open file :\r\n// Auth --> Auth.jsx\r\n\r\n\r\n// Redux thunk:\r\n// is used to do asynchronous action in Redux\r\n\r\nexport const signup = (authData, navigate) => async (dispatch) => {                        \r\n    try{                                                                                    \r\n        const { data } = await api.signUp(authData);   \r\n        console.log(data); \r\n        dispatch({ type: 'AUTH', data });  \r\n        // dispatches only (once) when user logged in. It's gone after REFRESH.        \r\n        dispatch(setCurrentUser(JSON.parse(localStorage.getItem('Profile'))));  // Navbar.jsx                                                       \r\n        navigate('/');    \r\n    }catch(error){\r\n        console.log(error);                                                                                                                                                                                                                                                 \r\n    }\r\n}\r\n\r\nexport const login = (authData, navigate) => async (dispatch) => {\r\n    try{\r\n        const { data } = await api.logIn(authData)                                \r\n        dispatch({ type: 'AUTH', data })     \r\n        dispatch(setCurrentUser(JSON.parse(localStorage.getItem('Profile'))));  // Navbar.jsx                                                                                          \r\n        navigate('/')    \r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n}"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,QAAQ;AAC7B;AACA,SAASC,cAAc,QAAQ,eAAe;;AAE9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,QAAQ,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC9D,IAAG;IACC,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMN,GAAG,CAACO,MAAM,CAACJ,QAAQ,CAAC;IAC3CK,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjBD,QAAQ,CAAC;MAAEK,IAAI,EAAE,MAAM;MAAEJ;IAAK,CAAC,CAAC;IAChC;IACAD,QAAQ,CAACJ,cAAc,CAACU,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;IACxEV,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC,QAAMW,KAAK,EAAC;IACTP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,CAACb,QAAQ,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC7D,IAAG;IACC,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMN,GAAG,CAACiB,KAAK,CAACd,QAAQ,CAAC;IAC1CE,QAAQ,CAAC;MAAEK,IAAI,EAAE,MAAM;MAAEJ;IAAK,CAAC,CAAC;IAChCD,QAAQ,CAACJ,cAAc,CAACU,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;IACxEV,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC,QAAMW,KAAK,EAAC;IACTP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;EACtB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}